// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { Capacitor, CapacitorHttp } from '@capacitor/core';
import type { HttpResponse } from '@capacitor/core';

const SUPABASE_URL = "https://pwhibcdunfpccyuewpob.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InB3aGliY2R1bmZwY2N5dWV3cG9iIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDUwODAzMTgsImV4cCI6MjA2MDY1NjMxOH0.DWq7Hsue9J8Ns4wZvQM5JQ_s-47muIcZbqffKRUirfw";

// Use the Capacitor native HTTP stack on iOS/Android to bypass CORS/origin issues
const isNative = Capacitor?.isNativePlatform?.() ?? false;

const customFetch: typeof fetch = async (input: RequestInfo, init?: RequestInit) => {
  const url = typeof input === 'string' ? input : input.url;
  const opts: RequestInit = init ?? {};
  const method = (opts.method || 'GET') as any;

  // Normalize headers to a plain object
  const headers = (opts.headers instanceof Headers)
    ? Object.fromEntries(opts.headers.entries())
    : ((opts.headers as Record<string, string>) || {});

  // Prepare request body
  let data: any = undefined;
  if (opts.body) {
    const ct = (headers['Content-Type'] || headers['content-type'] || '').toString();
    if (typeof opts.body === 'string' && ct.includes('application/json')) {
      try { data = JSON.parse(opts.body); } catch { data = opts.body; }
    } else {
      data = opts.body as any;
    }
  }

  const resp: HttpResponse = await CapacitorHttp.request({ url, method, headers, data });

  const body = typeof resp.data === 'string' ? resp.data : JSON.stringify(resp.data ?? null);
  const responseHeaders = new Headers(resp.headers as any);
  return new Response(body, { status: resp.status, headers: responseHeaders });
};

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  SUPABASE_URL,
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      flowType: 'pkce',
      autoRefreshToken: true,
      persistSession: true,
      detectSessionInUrl: true,
    },
    global: isNative ? { fetch: customFetch } : undefined,
  }
);
